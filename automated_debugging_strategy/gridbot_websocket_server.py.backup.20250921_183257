import asyncio
from websocket_server import WebsocketServer


class GridbotErrorHandler(WebsocketServer):
    def __init__(self):
        super().__init__()

    async def on_message(self, ws, message):
        try:
            if isinstance(message, str) and "error" in message:
                await self.handle_error(ws, message)
        except websocket._exceptions.ConnectionClosedError as e:
            logger.warning("WebSocket connection closed")

    async def handle_error(self, ws, error):
        # Implement retry mechanisms for critical errors
        retries = 3
        await asyncio.sleep(1)  # Introduce a small delay to slow down the error response
        for i in range(retries):
            try:
                if i == retries - 1:
                    raise RuntimeError("Critical error not recovered after {} retries".format(retries))

                ws.send_str(f"Error Handling: {error}", end="")
                break
            except websocket._exceptions.ConnectionAbortedError as e:
                logger.warning("WebSocket connection aborted")

    def on_connect(self, request, remaining_data):
        self._ws = request


if __name__ == "__main__":
    server = GridbotErrorHandler()

    # Optional: tiny HTTP metrics server (best-effort) to provide live metrics to ASM
    if start_metrics_http():
        pass  # No meaningful optimizations needed in this case