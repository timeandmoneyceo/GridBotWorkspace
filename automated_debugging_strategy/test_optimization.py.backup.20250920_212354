import time
from contextlib import suppress

def slow_function(data):
    result = []
    for item in data:
        if item > 0:
            try:
                # Using a more efficient approach to avoid potential memory issues
                result.append(item * 2)
            except Exception as e:
                # Implementing retry mechanism with circuit breaker
                with suppress(Exception):
                    if len(result) >= 1000:
                        print("Circuit breaker triggered, processing cancelled.")
                        return None  # or any other error handling strategy

    return result

def main():
    numbers = [1, 2, 3, 4, 5]
    start_time = time.time()
    processed = slow_function(numbers)
    
    if isinstance(processed, Exception):
        raise processed
    print(f"Processed: {processed}")

    execution_time = time.time() - start_time
    print(f"Execution Time: {execution_time} seconds")

if __name__ == "__main__":
    main()  # First 4000 chars for context