import asyncio
from websocket_server import WebsocketServer


class GridbotErrorHandler(WebsocketServer):
    def __init__(self):
        super().__init__()

    async def on_message(self, ws, message):
        try:
            if isinstance(message, str) and "error" in message:
                # Implement retry mechanisms for critical errors using circuit breakers and graceful degradation
                await asyncio.sleep(1)  # Introduce a small delay to slow down the error response
                await self._handle_critical_error()
        except websocket._exceptions.ConnectionClosedError as e:
            logger.warning("WebSocket connection closed")

    async def _handle_critical_error(self):
        if isinstance(e, RuntimeError) and "critical" in str(e.__class__):  # Critical error not recovered after retries
            await asyncio.sleep(10)  # Wait for 10 seconds before retrying
        else:
            raise

    def on_connect(self, request, remaining_data):
        self._ws = request


if __name__ == "__main__":
    server = GridbotErrorHandler()

    # Optional: tiny HTTP metrics server (best-effort) to provide live metrics to ASM
    if start_metrics_http():
        pass  # No meaningful optimizations needed in this case  # First 4000 chars for context